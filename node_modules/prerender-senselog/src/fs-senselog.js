const fs = require('node-fs');
const os = require('os');
const util = require('../../../lib/util');

module.exports = {

    init: function() {
        util.log(`[SenseLog] Sensemakers Apache access log engine loaded!`);
        this.logData = {};
    },

    /**
     * util.pad numbers with 0 if smaller than 10
     * 
     * @param number (int)
     * @return util.padded string (string)
    **/
    pad: function(number) {	
        return (number < 10) ? '0'+number : ''+number;
    },

    getDate: function() {
        
        const date = new Date();
        return `${date.getFullYear()}-${this.pad(date.getMonth()+1)}-${this.pad(date.getDate())}`;
    },

    /**
     * getDatestamp will return something like 05/Dec/2018:01:00:00 +0100
     * 
     * @return Accesslog compatible date/time string
     */
    getDatestamp: function () {

        // future usage possibly
        const mLong = ["January", "February", "March", "April", "May", "June","July", "August", "September", "October", "November", "December"];
        const mShort = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
        
        const date = new Date();
        return `${this.pad(date.getDate())}/${mShort[date.getMonth()]}/${date.getFullYear()}:${this.pad(date.getHours())}:${this.pad(date.getMinutes())}:${this.pad(date.getSeconds())} +0${-(date.getTimezoneOffset()) / 60}00`;
    },

    addLog: function(data) {
        for(let key in data) {
            this.logData[key] = data[key];
        }
    },

    getLog: function() {
        return this.logData;
    },

    requestReceived: function(req, res, next) {
        
        if (req.prerender.url) {
            let logData = {};

            logData.ip = req.connection.remoteAddress.replace('::ffff:10.', '10.');
            logData.ipReal = (req.headers['x-forwarded-for']) ? req.headers['x-forwarded-for'] : req.connection.remoteAddress;
            logData.ua = req.headers['user-agent'];
            logData.httpVersion = req.httpVersion;
            logData.referer = req.referer;
            logData.dateStamp = this.getDatestamp();
    
            // Strip our magical variable
            if (req.prerender.url.indexOf("?snapshot") > 0) {
                req.prerender.url = req.prerender.url.replace("?snapshot", "");
                // console.log("[Sensemakers] SEO Request: stripping the ?snapshot variable", req.prerender.url);
            }
    
            req.prerender.start = new Date();
            req.prerender.responseSent = false;
    
            this.addLog(logData);
        }
        next();
    },

    beforeSend: function(req, res, next) {

        if (req.prerender.url && req.prerender.content) {

            let logData = this.getLog();
            if (logData.dateStamp && logData.ip) {

                logData.url = req.prerender.url;
                logData.status = req.prerender.statusCode;
                logData.length = req.prerender.content.length;
                logData.refered = (logData.referer) ? `"${logData.referer}"` : '"-"';  
        
                const ms = new Date().getTime() - req.prerender.start.getTime();
                const accessLog = `${logData.ip} - - [${logData.dateStamp}] "GET ${logData.url} HTTP/${logData.httpVersion}" ${logData.status} ${logData.length} ${logData.refered} "${logData.ua} ${(req.prerender.senseCache == true) ? 'SenseCache/1.0' : ''}" ${logData.ipReal} ${ms}ms`;
                const logFile = `${this.getDate()}.snapshot.${(logData.ipReal.match(/10.2./g) || logData.ipReal.match(/127.0./g)) ? 'internal.access.log' : 'access.log'}`;
                const acb = () => {}                                        // Shhhhh

                fs.appendFile(logFile, accessLog+''+os.EOL, 'utf8', acb);   // write access log (apache style) async to fs
            }
        }
        next();
    }
}