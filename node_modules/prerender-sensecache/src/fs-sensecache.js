const util = require('../../../lib/util');
const senseCache = require('./fs-cachemodule');

module.exports = {

    init: function() {
        util.log(`[SenseCache] Sensemakers FS cache engine!`);
    },

    requestReceived: function(req, res, next) {

        if (req.method !== 'GET') {     // We only want to serve GET requests from cache (rendering our VueJS website for crawlers)            
            return next();
        }
        if (req.prerender.url || req.prerender.statusCode == 200) {
            
            senseCache.cache.read(req.prerender.url, function (error, byteStream) {
                
                const minLength     = process.env.CACHE_MIN_LENGTH || 4000;
                let html            = ''+byteStream;
                if (!error && html) {

                    if (html.length < minLength) {

                        util.log(`[SenseCache] Malformed cache ${req.prerender.url} (length: ${html.length} < minLenght: ${minLength}) removing cached page...`);
                        senseCache.cache.remove(req.prerender.url);
                        req.prerender.senseCache = false;
                        return next();
                    }
                    
                    // SEO snapshot fix
                    if (html.substr(0, 10) == 'html<html>') {

                        util.log(`[SenseCache] Stored HTML for url '${req.prerender.url}' needed a small SEO correction`);
                        html = html.substr(4);
                    }

                    req.prerender.senseCache = true;
                    util.log(`[SenseCache] Serving ${req.prerender.url} from cache (length: ${html.length})`);
                    res.send(200, html);
                } else {
    
                    if (!req.prerender.url.match(/\/$/)) {

                        util.log(`[SenseCache] Wrong URL received! It didn't end with a '/' ${req.prerender.url}`);
                    }
                    return next();
                }
            });
        }
    },

    beforeSend: function(req, res, next) {
        if (!req.prerender.senseCache) {

            const minLength     = process.env.CACHE_MIN_LENGTH || 4000;
            const html          = req.prerender.content;
            if (req.prerender.statusCode == 200 && html.length > minLength) {

                util.log(`[SenseCache] Writing cache for ${req.prerender.url} ${html.length}`);
                senseCache.cache.write(req.prerender.url, html);
            }
        }
        next();
    }

}